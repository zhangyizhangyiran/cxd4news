package com.cxd.cxd4android.widget;import android.annotation.SuppressLint;import android.content.Context;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.webkit.JavascriptInterface;import com.cxd.cxd4android.global.BaseApplication;import com.cxd.cxd4android.global.LocalUserModel;import com.orhanobut.logger.Logger;import com.tencent.smtt.export.external.interfaces.WebResourceRequest;import com.tencent.smtt.export.external.interfaces.WebResourceResponse;import com.tencent.smtt.sdk.CookieSyncManager;import com.tencent.smtt.sdk.WebSettings;import com.tencent.smtt.sdk.WebView;import com.tencent.smtt.sdk.WebViewClient;import com.tencent.smtt.utils.TbsLog;import java.util.Map;/** * Created by wangxiaofa on 16/11/10. */public class X5BaseWebview extends WebView {    private Context mContext;    LocalUserModel userModel;    @SuppressLint("SetJavaScriptEnabled")    public X5BaseWebview(Context context, AttributeSet attributeSet) {        super(context, attributeSet);        if (userModel == null) {            userModel = new LocalUserModel();        }        mContext = context;        setBackgroundColor(0);        this.setWebViewClient(client);        /**         * Modify By Gele         */        this.addJavascriptInterface(new InJavaScriptLocalObj(), "local_obj");        initWebViewSettings();        this.getView().setClickable(true);        this.getView().setOnTouchListener(new OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                return false;            }        });    }    /**     * Modify By Gele     */    final class InJavaScriptLocalObj {        @JavascriptInterface        public void showSource(String htmlA) {//            Logger.i("HTML:" + htmlA);            Log.i("HTML:", htmlA);        }    }    public X5BaseWebview(Context context) {        super(context);        setBackgroundColor(0);    }    /**     * 设置webviewClient事件     */    protected WebViewClient client = new WebViewClient() {        /**         * 防止加载网页时调起系统浏览器         */        public boolean shouldOverrideUrlLoading(WebView view, String url) {            //view.loadUrl(url);            return false;        }        @Override        public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {            Map<String, String> requestHeaders = request.getRequestHeaders();            requestHeaders.put("TOKEN", userModel.getHeader());            requestHeaders.put("sourceCode", BaseApplication.mApp.getApplicationMetaData("CXD_CHANNEL_ID"));            requestHeaders.put("sourceType", "1");            requestHeaders.put("useVersion", userModel.getAppVersionName());            requestHeaders.put("thirdPay", userModel.getThirdPayType());            requestHeaders.put("clientid", "android-" + userModel.getAppVersionName());            Logger.i(request.getRequestHeaders().toString());            return super.shouldInterceptRequest(view, request);        }        public void onReceivedHttpAuthRequest(WebView webview,                                              com.tencent.smtt.export.external.interfaces.HttpAuthHandler httpAuthHandlerhost, String host,                                              String realm) {            boolean flag = httpAuthHandlerhost.useHttpAuthUsernamePassword();        }        @Override        public void onPageFinished(WebView view, String url) {            super.onPageFinished(view, url);            /**             * Modify By Gele             */            view.loadUrl(String.format("javascript:window.local_obj.showSource('<head>'+" + "document.getElementsByTagName('html')[0].innerHTML+'</head>');"));//            view.loadUrl("javascript:window.local_obj.showSource(document.getElementsByTagName('article')[0].innerText);");//            view.loadUrl("javascript:comjs.loadHtmlContent(document.documentElement.outerHTML);void(0);");        }    };    /**     * 初始化webviewSetting的设置     */    @SuppressLint("SetJavaScriptEnabled")    private void initWebViewSettings() {        WebSettings webSetting = this.getSettings();        webSetting.setDefaultTextEncodingName("UTF-8");        webSetting.setJavaScriptEnabled(true);        webSetting.setAllowFileAccess(true);//启用或禁止WebView访问文件数据        webSetting.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);        webSetting.setJavaScriptCanOpenWindowsAutomatically(true);//支持通过JS打开新窗口        //支持屏幕缩放        webSetting.setSupportZoom(true);        webSetting.setBuiltInZoomControls(true);        webSetting.setDisplayZoomControls(false);        webSetting.setUseWideViewPort(true);//设置屏幕自适应        webSetting.setSupportMultipleWindows(false);//默认不支持打开新窗口，true为打开新窗口        webSetting.setLoadWithOverviewMode(true);//设置屏幕自适应        webSetting.setAppCacheEnabled(true);        webSetting.setDatabaseEnabled(true);        webSetting.setDomStorageEnabled(true);        webSetting.setGeolocationEnabled(true);        webSetting.setAppCacheMaxSize(Long.MAX_VALUE);        // webSetting.setPageCacheCapacity(IX5WebSettings.DEFAULT_CACHE_CAPACITY);        webSetting.setPluginState(WebSettings.PluginState.ON_DEMAND);        webSetting.setRenderPriority(WebSettings.RenderPriority.HIGH);        //webSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);//默认不使用缓存！        webSetting.setAppCachePath(mContext.getDir("appcache", 0).getPath());        webSetting.setDatabasePath(mContext.getDir("databases", 0).getPath());        webSetting.setGeolocationDatabasePath(mContext.getDir("geolocation", 0)                .getPath());        // webSetting.setPageCacheCapacity(IX5WebSettings.DEFAULT_CACHE_CAPACITY);        webSetting.setPluginState(WebSettings.PluginState.ON_DEMAND);        webSetting.setRenderPriority(WebSettings.RenderPriority.HIGH);        // this.getSettingsExtension().setPageCacheCapacity(IX5WebSettings.DEFAULT_CACHE_CAPACITY);//extension        // settings 的设计        webSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);        long time = System.currentTimeMillis();        TbsLog.d("time-cost", "cost time: "                + (System.currentTimeMillis() - time));        CookieSyncManager.createInstance(mContext);        CookieSyncManager.getInstance().sync();    }}